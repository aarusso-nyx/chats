# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Topic
  @aws_cognito_user_pools
  @model(queries: null, mutations: { create: "createTopic", update: "updateTopic", delete: null }, subscriptions: null)
  @auth(rules: [{ allow: owner,   operations: [read, create]},
                { allow: private, operations: [read] }])
{
  id: ID!
  topic: String!
  descr: String
  owner: String
  n_msgs: Int!
  n_subs: Int!
  
  subscriptions: [Subscribe] @hasMany
  messages:      [Message]   @hasMany
}


type Message
  @aws_cognito_user_pools
  @model(queries: null, mutations: { create: "createMessage", update: null, delete: "deleteMessage" }, subscriptions: null, timestamps: { updatedAt: null })
  @auth(rules: [{ allow: owner,   operations: [read, create, delete]},
                { allow: private, operations: [read] }])
{
  id: ID!
  owner: String
  topicId: ID!  
  payload: AWSJSON!
  attachs: [AWSURL]
  
  topic: Topic! @belongsTo(fields: ["topicId"])
  status: [Status] @hasMany
}



type Subscribe
  @aws_cognito_user_pools
  @model(queries: null, subscriptions: null)
  @auth(rules: [{ allow: owner,   operations: [create, read, delete]},
                { allow: private, operations: [read] }])
{
  id: ID!
  topicId: ID!
  userId: String!
  owner: String
  
  expiresAt: AWSDateTime

  acked:  Boolean! @default(value: "false") 
  active: Boolean! @default(value: "true")
}



type Status
  @aws_cognito_user_pools
  @model(queries: null, mutations: { delete: null }, subscriptions: null)
  @auth(rules: [{ allow: owner,   operations: [read, create, update]},
                { allow: private, operations: [read] }])
{
  id: ID!
  messageId: ID!
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])

  acked:  Boolean @default(value: "false") 
  active: Boolean @default(value: "true")
}

# Extended queries and subscriptions
type Query {
  fetchFrom(topicId: ID!, createdAt: AWSDateTime!): [Message] @aws_cognito_user_pools
  topicsOf(userId: String!): [Topic] @aws_cognito_user_pools
}


type Mutation {
  postMessage(message: MessageInput!): Message @aws_cognito_user_pools
}

input MessageInput {
  owner: String!
  topicId: ID!  
  payload: AWSJSON!
  attachs: [AWSURL]
}


type Subscription {
  onSubscribed(userId: String!): Subscribe @aws_subscribe(mutations: ["createSubscribe"])
}