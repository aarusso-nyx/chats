# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!


# input AMPLIFY { globalAuthRule: AuthRule = { allow: private } } # FOR TESTING ONLY!

type Topic
  @aws_cognito_user_pools
  @model
  @auth(rules: [{ allow: owner },
                { allow: private, operations: [read] }])
{
  id: ID!
  topic: String!
  descr: String
  owner: String
  n_msgs: Int @default(value: "0") 
  n_subs: Int @default(value: "0") 
  
  subscriptions: [Subscribe] @hasMany (indexName: "getByTopic")
  messages:      [Message]   @hasMany (indexName: "getByTopic")
}


type Message
  @aws_cognito_user_pools
  @model
  @auth(rules: [{ allow: owner,   operations: [read, create, delete]},
                { allow: private, operations: [read] }])
{
  id: ID!
  owner: String
  topicId: ID!   @index(name: "getByTopic", sortKeyFields: ["createdAt"])
  payload: String
  attachs: [AWSURL]
  createdAt: AWSDateTime 
  status: [Status] @hasMany(indexName: "getByMessage")
}



type Subscribe
  @aws_cognito_user_pools
  @model
  @auth(rules: [{ allow: owner },
                { allow: private, operations: [read] }])
{
  id: ID!
  topicId: ID! @index(name: "getByTopic")
  username: String! @index(name: "getByUser")
  owner: String
  
  expiresAt: AWSDateTime @default(value: "1969-12-31T00:00:00.000Z")

  acked:  Boolean @default(value: "false") 
  active: Boolean @default(value: "true")
}



type Status
  @aws_cognito_user_pools
  @model(queries: null, mutations: { delete: null }, subscriptions: null)
  @auth(rules: [{ allow: owner,   operations: [read, create, update]},
                { allow: private, operations: [read] }])
{
  id: ID!
  messageId: ID! @index(name: "getByMessage")
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])

  acked:  Boolean @default(value: "false") 
  active: Boolean @default(value: "true")
}



type Query {
  listCognitoUsers: [CognitoUser!]! @function(name: "listUsers-${env}")
}

type CognitoUser {
  username: String!
  email: String
  name: String
}