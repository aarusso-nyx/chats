# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!
type Topic
  @model(mutations: { update: null, delete: null })
  @auth(rules: [{ allow: owner,   provider: userPools, operations: [read, create]},
                { allow: private, provider: userPools, operations: [read] }])
{
  id: ID!
  topic: String!
  descr: String

  owner: String! # @auth(rules: [{ allow: owner, operations: [read, delete] }])
  #@aws_cognito_user_pools_identity_provider
  
  n_msgs: Int! # @function(name: "getTopicMsgs", query: { "topicId": "$ctx.source.id" })
  n_subs: Int! # @function(name: "getTopicSubs", query: { "topicId": "$ctx.source.id" })
  
  subscriptions: [Subscribe] @hasMany
  messages:      [Message]   @hasMany
}


type Message
  @model(timestamps: { updatedAt: null }, mutations: { update: null }, subscriptions: { onUpdate: null })
  @auth(rules: [{ allow: owner,   provider: userPools, operations: [read, create, delete]},
                { allow: private, provider: userPools, operations: [read] }])
{
  id: ID!
  owner: String! #@aws_cognito_user_pools_identity_provider
  
  payload: AWSJSON!
  attachs: [AWSURL]
  
  topicId: ID!
  topic: Topic! @belongsTo(fields: ["topicId"])
  
  status: [Status] @hasMany
}



type Subscribe
  @model(queries: null, mutations: null, subscriptions: null )
  @auth(rules: [{ allow: owner,   provider: userPools, operations: [create, read, delete]},
                { allow: private, provider: userPools, operations: [read] }])
  # @index(name: "byUserIdAndActive", fields: ["userId", "active"])
{
  id: ID!
  topicId: ID!
  topic: Topic! @belongsTo(fields: ["topicId"])
  
  userId: String!
  owner: String! #@aws_cognito_user_pools_identity_provider
  
  expiresAt: AWSDateTime

  acked:  Boolean! @default(value: "false") 
  active: Boolean! @default(value: "true")
}



type Status
  @model(queries: null, mutations: { delete: null }, subscriptions: { onDelete: null })
  @auth(rules: [{ allow: owner,   provider: userPools, operations: [read, create, update]},
                { allow: private, provider: userPools, operations: [read] }])
{
  id: ID!
  messageId: ID!
  # message: Message! @belongsTo(fields: ["messageId"])

  userId: String!
    acked:  Boolean! @default(value: "false") 
  active: Boolean! @default(value: "true")
}

# Extended queries and subscriptions
type Query {
  messagesByTopicAndCreatedAt(topicId: ID!, createdAt: AWSDateTime!): [Message] @aws_iam
  topicsByUserId(userId: String!): [Topic] @aws_iam
}

type Subscription {
  onCreateSubscriptionByUserId(userId: String!): Subscribe
    @aws_subscribe(mutations: ["createSubscribe"])
}
